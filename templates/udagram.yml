AWSTemplateFormatVersion: "2010-09-09"
Description: Udagram Infrastructure

Parameters:
  ProjectName:
    Type: String
    Description: Project Name
  VolumeSize:
    Type: String
    Description: Size of the EC2 volume
  ImageId:
    Type: String
    Description: AMI ID #Ubuntu 22
  KeyPairName:
    Type: String
    Description: The name of the key pair
  InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type
  MinSize:
    Type: Number
    Default: 1
    Description: Minimum number of instances
  DesiredCapacity:
    Type: Number
    Default: 1
    Description: Desired capacity for the Auto Scaling group
  MaxSize:
    Type: Number
    Default: 3
    Description: Maximum number of instances
  HealthCheckIntervalSeconds:
    Type: Number
    Default: 10
    Description: Health check interval in seconds
  HealthCheckTimeoutSeconds:
    Type: Number
    Default: 8
    Description: Health check timeout in seconds
  HealthyThresholdCount:
    Type: Number
    Default: 2
    Description: Number of healthy responses before considering an instance healthy
  UnhealthyThresholdCount:
    Type: Number
    Default: 5
    Description: Number of unhealthy responses before considering an instance unhealthy

Resources:
  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        UserData:
          Fn::Base64: |
            #!/bin/bash
            apt-get update -y
            sudo apt-get install nginx -y
            service nginx start
            WEB_DIR="/var/www/html"
            # Create a basic index.html file
            cat <<EOF > index.html
            <!DOCTYPE html>
            <html>
            <head>
                <title>It works! Udagram, Udacity</title>
            </head>
            <body>
                <h1>It works! Udagram, Udacity</h1>
                <h1> HaiKN2 Udagram <h1>
            </body>
            </html>
            EOF
            sudo rm -r $WEB_DIR/index.*
            sudo cp index.html $WEB_DIR
            service nginx restart
        ImageId: !Ref ImageId
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref WebServerSecGroup
        InstanceType: !Ref InstanceType
        BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: !Ref VolumeSize
        IamInstanceProfile:
          Name: !Ref WebAppInstanceProfile

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${ProjectName}-vpc-id"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to our hosts from the LB Security Group
      VpcId:
        Fn::ImportValue: !Sub "${ProjectName}-vpc-id"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LBSecGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  WebAppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-web-servers"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref WebAppInstanceRole

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${ProjectName}-private-subnets"
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      DesiredCapacity: !Ref DesiredCapacity
      MaxSize: !Ref MaxSize
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${ProjectName}-public-subnet1"
        - Fn::ImportValue: !Sub "${ProjectName}-public-subnet2"
      SecurityGroups:
        - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: "80"
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: !Ref HealthCheckIntervalSeconds
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: !Ref HealthCheckTimeoutSeconds
      HealthyThresholdCount: !Ref HealthyThresholdCount
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: !Ref UnhealthyThresholdCount
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${ProjectName}-vpc-id"

Outputs:
  LoadBalancerURL:
    Description: "ELB Public URL"
    Value: !Sub "http://${WebAppLB.DNSName}"
    Export:
      Name: !Sub "${ProjectName}-LoadBalancer-URL"
